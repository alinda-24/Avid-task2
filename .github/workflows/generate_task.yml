name: Generate Task

on:
  workflow_dispatch:
    inputs:
      theme:
        description: 'Theme for the new task'
        required: true
        default: 'Create a simple game application that includes the following functionalities: player movement, scoring system, and enemy interactions.'
      difficulty:
        description: 'Difficulty level for the new task'
        required: true
        type: choice
        options:
          - basic
          - medium
          - hard
        default: medium
      language:
        description: 'Natural language for the task description'
        required: true
        default: 'English'
  push:
    branches:
      - task-*

permissions:
  contents: write  # Grant write permission for the GITHUB_TOKEN
  pull-requests: write  # Making sure the PR comments can be added

jobs:
  generate-task-description:
    runs-on: ubuntu-latest

    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai pytz

      - name: Generate task description
        id: generate-task-description
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TASK_DIFFICULTY: ${{ github.event.inputs.difficulty }}
          TASK_THEME: ${{ github.event.inputs.theme }}
          TASK_LANGUAGE: ${{ github.event.inputs.language }}
        run: |
          python scripts/generate_task_description.py "${{ secrets.OPENAI_TOKEN }}"

      - name: Set branch name
        id: set-branch-name
        run: echo "::set-output name=branch_name::$(git rev-parse --abbrev-ref HEAD)"

  generate-solution:
    runs-on: ubuntu-latest
    needs: generate-task-description

    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-task-description.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate solution
        id: generate-solution
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_solution.py "${{ secrets.OPENAI_TOKEN }}" "${{ needs.generate-task-description.outputs.branch_name }}"

      - name: Set branch name
        id: set-branch-name
        run: echo "::set-output name=branch_name::$(git rev-parse --abbrev-ref HEAD)"

  adversarial-review:
    runs-on: ubuntu-latest
    needs: generate-solution

    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-solution.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Adversarial Review - Improve Solution
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/adversarial_solution.py "${{ secrets.OPENAI_TOKEN }}" "tasks/new_task.md" ".hidden_tasks"

      - name: Set branch name
        id: set-branch-name
        run: echo "::set-output name=branch_name::$(git rev-parse --abbrev-ref HEAD)"

  generate-tests:
    runs-on: ubuntu-latest
    needs: generate-solution

    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-solution.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_tests.py "${{ secrets.OPENAI_TOKEN }}" "${{ needs.generate-solution.outputs.branch_name }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$branch" ]; then
            echo "Branch name is empty, using fallback 'default-branch'"
            branch="default-branch"
          fi
          echo "::set-output name=branch_name::$branch"

  generate-template-code:
    runs-on: ubuntu-latest
    needs: generate-tests

    outputs:
      branch_name: ${{ steps.set-branch-name.outputs.branch_name }}

    steps:
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.generate-tests.outputs.branch_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai

      - name: Generate template code
        id: generate-template-code
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/generate_template_code.py "${{ secrets.OPENAI_TOKEN }}" "${{ needs.generate-tests.outputs.branch_name }}"

      - name: Set branch name
        id: set-branch-name
        run: |
          branch=$(git rev-parse --abbrev-ref HEAD)
          if [ -z "$branch" ]; then
            echo "Branch name is empty, using fallback 'default-branch'"
            branch="default-branch"
          fi
          echo "::set-output name=branch_name::$branch"